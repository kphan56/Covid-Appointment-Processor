	During my time in BTP200, I picked up a lot of skills and knowledge in coding I wouldn't have learned from programming with C. My biggest nightmare with C programming was handling whitespace and several other inputs when I programmed with C in BTP100. My nightmare was quickly cast away when I was introduced to iostream in C++ and the istream operator.
	 Learning about classes, privacy access, and constructors was the biggest thrill for me in the course. I wanted to learn more about initializing attributes in certain ways outside of init functions and the use of constructors throughout the course had shown me that there was an ideal way to do it and put attributes into safe empty state. Constructors were always a thrill for me to program in the workshops and final project. At some point, I was wondering when would function privacy be a part of the course because my prior knowledge of Java and private functions told me that they existed in any programming language. C++ was no exception to that and I was overjoyed when introduced to classes and data member access. It took me some time to understand how it worked across different modules because I had never worked with privacy access across many modules before but I was able to pick up on it soon.
	My biggest challenge in the course was definitely file objects and file input and output with the use of string functions. I wasn't able to complete lab 6 because I had a lot of trouble interpreting read, write, load, and opening files. There were a lot of different functions and concepts to master when working with files that I just wasn't prepared for. It eventually dawned on me that to avoid copying a character/word/set of data from a file (also applies to iostream read/write functions), I would need to cascade parts of the input that I wanted and statically store parts of the input I did not need or want into a variable that would act as a delimiter.
	In terms on what I want to see improved for the course, it would be more advanced applications on resources as well as more demonstrations on handling files. The examples about files in the notes were too simple and would very often not come in handy whenever I was working on more advanced file inputs and outputs in the workshops and final project. Often times, I wanted to see the importance of copy assignment operators and how dire they could be to a program but have never really seen much of it's importance on a larger scale in the workshops and lectures. Overall, BTP200 was a very big learning experience that will surely familiarize me with object oriented programming in the future. Though there are flaws that I see and would like to improve on when working with C++, there will continue to be a vast need for object oriented programming in the computer science field that I wish to take advantage of.